name: Backend Deploy

on:
  push:
    branches: [main]
    paths: ["backend/**"]
  pull_request:
    branches: [main]
    paths: ["backend/**"]
  release:
    types: [published]

env:
  AWS_REGION: eu-central-1
  PYTHON_VERSION: "3.11"

jobs:
  test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-asyncio black isort mypy

      - name: Lint with Black
        run: black --check --diff .

      - name: Lint with isort
        run: isort --check-only --diff .

      - name: Type check with mypy
        run: mypy app/ --ignore-missing-imports

      - name: Run tests
        run: |
          pytest --cov=app --cov-report=xml --cov-report=term-missing

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage.xml
          flags: backend
          name: backend-coverage

  deploy-staging:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: staging
    defaults:
      run:
        working-directory: ./backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install AWS SAM
        uses: aws-actions/setup-sam@v2

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Build SAM application
        run: sam build --use-container

      - name: Deploy to staging
        run: |
          sam deploy \
            --stack-name replymint-staging \
            --parameter-overrides "Environment=staging LogRetentionDays=14" \
            --capabilities CAPABILITY_IAM \
            --no-confirm-changeset \
            --no-fail-on-empty-changeset

      - name: Get API URL
        run: |
          API_URL=$(aws cloudformation describe-stacks \
            --stack-name replymint-staging \
            --query "Stacks[0].Outputs[?OutputKey=='ApiUrl'].OutputValue" \
            --output text \
            --region ${{ env.AWS_REGION }})
          echo "API_URL=$API_URL" >> $GITHUB_ENV

      - name: Health check
        run: |
          sleep 30  # Wait for deployment to stabilize
          curl -f "${{ env.API_URL }}/health" || exit 1

      - name: Notify deployment
        run: |
          echo "✅ Backend deployed to staging successfully!"
          echo "🌐 API URL: ${{ env.API_URL }}"

  deploy-production:
    needs: test
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    environment: production
    defaults:
      run:
        working-directory: ./backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install AWS SAM
        uses: aws-actions/setup-sam@v2

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Build SAM application
        run: sam build --use-container

      - name: Deploy to production
        run: |
          sam deploy \
            --stack-name replymint-prod \
            --parameter-overrides "Environment=prod LogRetentionDays=30" \
            --capabilities CAPABILITY_IAM \
            --no-confirm-changeset \
            --no-fail-on-empty-changeset

      - name: Get API URL
        run: |
          API_URL=$(aws cloudformation describe-stacks \
            --stack-name replymint-prod \
            --query "Stacks[0].Outputs[?OutputKey=='ApiUrl'].OutputValue" \
            --output text \
            --region ${{ env.AWS_REGION }})
          echo "API_URL=$API_URL" >> $GITHUB_ENV

      - name: Health check
        run: |
          sleep 30  # Wait for deployment to stabilize
          curl -f "${{ env.API_URL }}/health" || exit 1

      - name: Notify deployment
        run: |
          echo "🚀 Backend deployed to production successfully!"
          echo "🌐 API URL: ${{ env.API_URL }}"
          echo "📋 Release: ${{ github.ref_name }}"
